# Résidentiels : conso réalisée < conso normale (période ref), tri par date_fin
sql.residentiels.ref=\
SELECT date_fin, week, `Segment client` AS segment, \
       conso_lissee_tr_ref AS conso_tr, \
       conso_lissee_tn_ref AS conso_tn \
FROM enedis_sobriete \
WHERE `Segment client` = 'Résidentiels' \
  AND conso_lissee_tr_ref < conso_lissee_tn_ref \
ORDER BY date_fin ASC

# Professionnels
sql.professionnels.ref=\
SELECT date_fin, week, `Segment client` AS segment, \
       conso_lissee_tr_ref AS conso_tr, \
       conso_lissee_tn_ref AS conso_tn \
FROM enedis_sobriete \
WHERE `Segment client` = 'Professionnels' \
  AND conso_lissee_tr_ref < conso_lissee_tn_ref \
ORDER BY date_fin ASC

# Entreprises
sql.entreprises.ref=\
SELECT date_fin, week, `Segment client` AS segment, \
       conso_lissee_tr_ref AS conso_tr, \
       conso_lissee_tn_ref AS conso_tn \
FROM enedis_sobriete \
WHERE `Segment client` = 'Entreprises' \
  AND conso_lissee_tr_ref < conso_lissee_tn_ref \
ORDER BY date_fin ASC


# =========================
# Q5 : Croisement météo
# =========================

# URL du CSV Météo (Opendatasoft) \u2014 utiliser l'export CSV
meteo.url=https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/donnees-synop-essentielles-omm/exports/csv?lang=fr&timezone=Europe%2FBerlin&use_labels=true&delimiter=%3B

# Noms de vues Spark
meteo.view.raw=meteo_raw
meteo.view.agg=meteo_agg

# Noms de colonnes (adapter si ton printSchema() diffère)
meteo.col.datetime=Date
meteo.col.region=region (name)
meteo.col.temperature=Température (°C)

# Agrégation météo par (region, week, year) pour une REGION donnée
sql.meteo.aggregate=\
CREATE OR REPLACE TEMP VIEW ${meteo.view.agg} AS \
SELECT \
  `${meteo.col.region}` AS region, \
  weekofyear(to_timestamp(`${meteo.col.datetime}`)) AS week, \
  year(to_timestamp(`${meteo.col.datetime}`)) AS annee, \
  AVG(`${meteo.col.temperature}`) AS temp_moy \
FROM ${meteo.view.raw} \
WHERE `${meteo.col.region}` = '${REGION}' \
GROUP BY region, annee, week

# Résultat régional (référence) = Enedis + météo
sql.regional.ref=\
WITH e AS ( \
  SELECT date_fin, week, year(date_fin) AS annee, `Segment client` AS segment, \
         conso_lissee_tr_ref AS conso_tr, conso_lissee_tn_ref AS conso_tn \
  FROM enedis_sobriete \
  WHERE `Segment client`='${CATEGORIE}' AND conso_lissee_tr_ref < conso_lissee_tn_ref \
) \
SELECT e.date_fin, e.week, e.annee, e.segment, e.conso_tr, e.conso_tn, m.temp_moy \
FROM e \
LEFT JOIN ${meteo.view.agg} m \
  ON m.week = e.week AND m.annee = e.annee \
ORDER BY e.date_fin ASC

# =========================
# Connexion PostgreSQL
# =========================
jdbc.url=jdbc:postgresql://localhost:5432/big_data_cc
jdbc.user=postgres
jdbc.password=postgres
jdbc.table=Big_Data_CC
